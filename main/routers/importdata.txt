@router.post("/importexcel/")
async def importexcel(
    file: UploadFile, 
    db: Session = Depends(get_db) 
):
    if not file.filename.endswith((".xlsx", ".xls", ".csv")):
        raise HTTPException(status_code=400, detail="Invalid file format")

    # Read file into DataFra
    try:
        if file.filename.endswith(".csv"):
            df = pd.read_csv(file.file)
        else:
            df = pd.read_excel(BytesIO(await file.read()))
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Error reading file: {str(e)}")

    # Validate columns
    expected_columns = [
        "Sl No", "Medicine Name", "Exp.Date", "Batch No", "Received Qty", 
        "Free Qty", "Sheet Qty", "QOH", "Unit", "Pack Cost", "Pack Cost", 
        "Disc (%)", "Total Amt", "CGST%", "SGST%", "IGST%", "Tab MRP"
    ]
    if not all(col in df.columns for col in expected_columns):
        raise HTTPException(status_code=400, detail="Missing required columns")

    # Limit to 100 rows
    df = df.head(100)

    invoices = []
    for _, row in df.iterrows():
        invoice = models.Invoice(
            medicine_name=row["Medicine Name"],
            ex_date=datetime.strptime(str(row["Exp.Date"]), "%Y-%m-%d").date() if pd.notnull(row["Exp.Date"]) else None,
            batch_no=str(row["Batch No"]),
            rec_qty=int(row["Received Qty"]),
            free_qty=int(row["Free Qty"]) if pd.notnull(row["Free Qty"]) else 0,
            sheet_qty=int(row["Sheet Qty"]),
            qoh=int(row["QOH"]),
            unit=row["Unit"],
            pack_cost=row["Pack Cost"],
            pack_mrp=row["Tab MRP"],
            disc=row["Disc (%)"],
            total_amt=row["Total Amt"],
            cgst=row["CGST%"],
            sgst=row["SGST%"],
            igst=row["IGST%"] if pd.notnull(row["IGST%"]) else None
        )
        invoices.append(invoice)

    db.add_all(invoices)
    db.commit()

    return {"message": f"{len(invoices)} excel file upload"}





@router.get("/grn_filter", response_model=list[GRNRead])
def filter_grn( grn_code: str = Query(..., example="GRN_1", description="Enter GRN ID with prefix"),from_date: Optional[date] = Query(None),to_date: Optional[date] = Query(None),db: Session = Depends(get_db)):
    """
    Filter GRN records between given dates by GRN code.
    Args:
        from_date (date): Start date for filtering.
        to_date (date): End date for filtering.
        grn_id (int): GRN ID to filter by.
    """

    # Extract numeric part from GRN_1 â†’ 1
    if grn_code.startswith("GRN_"):
        grn_id = int(grn_code.replace("GRN_", ""))
    else:
        raise ValueError("GRN code must start with 'GRN_'")

    

    if from_date and to_date and grn_id:
        query = db.query(GRN).filter( GRN.invoice_date.between(from_date, to_date), GRN.id == grn_id)
    else:
        raise HTTPException(status_code=404, detail="Grn not found")

    return query.all()
