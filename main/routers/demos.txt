from fastapi import APIRouter, Depends,Query, HTTPException
from sqlalchemy.orm import Session
from main.database import get_db
from main.schemas.grn import GRNCreate,GRNRead,GRNFilterRequest
from main.models.grn import GRN,GRNMedicine
from datetime import date
from typing import Optional


router = APIRouter(prefix="/Grn", tags=["Grns"])


@router.post("/create_grn", response_model=GRNRead)
def create_grn(product: GRNCreate, db: Session = Depends(get_db)):
    """
    Create a new GRN (Goods Receipt Note) record along with its associated medicines.

    This endpoint allows the creation of a GRN entry in the database.
    The GRN details are provided through the `product` payload, which may
    also include a list of medicines. Each medicine is linked to the created GRN.

    Args:
        product (GRNCreate): Pydantic model containing GRN details and an optional
            list of medicines to be linked with this GRN.
        db (Session): SQLAlchemy database session dependency.

    Returns:
        GRNRead: The newly created GRN record with its associated medicines.
    """
    product_data = product.dict()
    medicines_data = product_data.pop("medicines", [])
    new_grn = GRN(**product_data)
    new_grn.medicines = [GRNMedicine(**med) for med in medicines_data]
    db.add(new_grn)
    db.commit()
    db.refresh(new_grn)
    return new_grn

@router.get("/get_grn", response_model=list[GRNRead])
def get_grn(db: Session = Depends(get_db)):
    ''' grn all data retrive '''
    return db.query(GRN).all()


@router.get("/grn/{grn_id}", response_model=GRNRead)
def read_grn(grn_id: int, db: Session = Depends(get_db)):
    ''' particular grn data reterive '''
    db_user = db.query(GRN).filter(GRN.id == grn_id).first()
    if not db_user:
        raise HTTPException(status_code=404, detail="Grn not found")
    return db_user

@router.post("/grn_filter")
def filter_grn( filter_data: GRNFilterRequest, db: Session = Depends(get_db)):
    """
    Filter GRN records between given dates by GRN code.
    Args:
        from_date (date): Start date for filtering.
        to_date (date): End date for filtering.
        grn_id (int): GRN ID to filter by.
    """

    grn_id = filter_data.GRN__
    from_date = filter_data.from_date
    to_date = filter_data.to_date

    if from_date and to_date and grn_id:
        query = db.query(GRN).filter( GRN.invoice_date.between(from_date, to_date), GRN.id == grn_id)
    else:
        raise HTTPException(status_code=404, detail="Grn not found")

    return query.all()


@router.put("/{grn_id}", response_model=GRNRead)
def update_grn(grn_id: int, product: GRNCreate, db: Session = Depends(get_db)):
    """
    Update an existing GRN (Goods Receipt Note) record by ID.

    This endpoint updates both the main GRN details and its associated medicines.
    The existing medicines will be removed and replaced with the provided list.

    Args:
        grn_id (int): The unique ID of the GRN to update.
        product (GRNCreate): The updated GRN data including medicines.
        db (Session, optional): The database session dependency.

    Raises:
        HTTPException: If no GRN is found with the given `grn_id` (404 Not Found).

    Returns:
        GRNRead: The updated GRN record with all its details and medicines.
    """
    db_grn = db.query(GRN).filter(GRN.id == grn_id).first()
    if not db_grn:
        raise HTTPException(status_code=404, detail="GRN not found")
    product_data = product.dict()
    medicines_data = product_data.pop("medicines", [])
    for key, value in product_data.items():
        setattr(db_grn, key, value)
    db_grn.medicines.clear()  
    db_grn.medicines = [GRNMedicine(**med) for med in medicines_data]

    db.commit()
    db.refresh(db_grn)
    return db_grn
